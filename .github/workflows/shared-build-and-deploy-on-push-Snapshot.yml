# This workflow will build a MuleSoft project and deploy to CloudHub

# Based on https://github.com/arch-jn/github-actions-mule-cicd-demo/blob/main/.github/workflows/build-and-deploy-on-push.yml

name: shared - Build and Deploy Snapshot

on:
  workflow_call:
    inputs:
      ENVIRONMENT:
        required: true
        type: string

    secrets:
      MULE_NEXUS_USERNAME:
        required: true
      MULE_NEXUS_PASSWORD:
        required: true
      GH_PAT_FOR_READ_PACKAGES:
        required: true
      ANYPOINT_PLATFORM_USERNAME:
        required: true
      ANYPOINT_PLATFORM_PASSWORD:
        required: true
      DECRYPTION_KEY:
        required: true
      ANYPOINT_PLATFORM_CLIENT_ID:
        required: true
      ANYPOINT_PLATFORM_CLIENT_PASSWORD:
        required: true
    
jobs:
  build:
    runs-on: ubuntu-latest
    env:
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
    
    steps:
    
    - uses: actions/checkout@v2
    
    - uses: actions/cache@v1
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
    
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    
    - name: Add repo credentials
      uses: s4u/maven-settings-action@v2.4.0
      with:
        servers: |
          [{
           "id": "mule-enterprise",
           "username": "${{ secrets.MULE_NEXUS_USERNAME }}",
           "password": "${{ secrets.MULE_NEXUS_PASSWORD }}"
          },{
           "id": "anypoint-exchange-v3",
           "username": "${{ secrets.ANYPOINT_PLATFORM_USERNAME }}",
           "password": "${{ secrets.ANYPOINT_PLATFORM_PASSWORD }}"
          },{
           "id": "github-mulesoft-ukef-mule-common",
           "username": "avaitonis",
           "password": "${{ secrets.GH_PAT_FOR_READ_PACKAGES }}"
          }]
    
    - name: Print effective-settings (optional)
      run: mvn help:effective-settings
    
    - name: Build with Maven
      run: mvn -B package --file pom.xml
    
    - name: Stamp artifact file name with commit hash
      run: |
        artifactName1=$(ls target/*.jar | head -1)
        commitHash=$(git rev-parse --short "$GITHUB_SHA")
        artifactName2=$(ls target/*.jar | head -1 | sed "s/.jar/-$commitHash.jar/g")
        mv $artifactName1 $artifactName2
    
    - name: Upload artifact 
      uses: actions/upload-artifact@master
      with:
          name: artifacts
          path: target/*.jar
        
  deploy:
    needs: build
    runs-on: ubuntu-latest
    #env:
    #  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    steps:    
    
    - uses: actions/checkout@v2
    
    - uses: actions/cache@v1
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-

    - uses: actions/download-artifact@master
      with:
        name: artifacts
    
    - name: Uppercase env name
      id: uppercase-env
      env:
        ENVIRONMENT: ${{ inputs.ENVIRONMENT }}
      run: |
        echo "::set-output name=ENVIRONMENT_UPPER::$(echo ${ENVIRONMENT^^})"
          
    
    - name: Deploy to DEV
      env:
        USERNAME: ${{ secrets.ANYPOINT_PLATFORM_USERNAME }}
        PASSWORD: ${{ secrets.ANYPOINT_PLATFORM_PASSWORD }}
        DECRYPTION_KEY: ${{ secrets.DECRYPTION_KEY }}
        ANYPOINT_PLATFORM_CLIENT_ID: ${{ secrets.ANYPOINT_PLATFORM_CLIENT_ID }}
        ANYPOINT_PLATFORM_CLIENT_PASSWORD: ${{ secrets.ANYPOINT_PLATFORM_CLIENT_PASSWORD }}
        ENVIRONMENT: ${{ inputs.ENVIRONMENT }}
        ENVIRONMENT_UPPER: ${{ steps.uppercase-env.outputs.ENVIRONMENT_UPPER }}
      run: |
        artifactName=$(ls *.jar | head -1)
        mvn deploy -DmuleDeploy \
         -Dmule.artifact=$artifactName \
         -Danypoint.username="$USERNAME" \
         -Danypoint.password="$PASSWORD" \
         -Danypointplatformclientid="$ANYPOINT_PLATFORM_CLIENT_ID" \
         -Danypointplatformclientsecret="$ANYPOINT_PLATFORM_CLIENT_PASSWORD" \
         -Denv=$ENVIRONMENT \
         -Ddeploymentenvironment=$ENVIRONMENT_UPPER \
         -Denvironment=$ENVIRONMENT \
         -DdecryptionKey="$DECRYPTION_KEY" \
         -DskipTests
